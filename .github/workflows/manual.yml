# This is a basic workflow that is manually triggered

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  push:
#   workflow_dispatch:
#     # Inputs the workflow accepts.
#     inputs:
#       name:
#         # Friendly description to be shown in the UI instead of 'name'
#         description: 'Person to greet'
#         # Default value if no value is explicitly provided
#         default: 'World'
#         # Input has to be provided for the workflow to run
#         required: true

jobs:

  # Gets the changed yaml files from the Deployments directory
  changes:
    continue-on-error: false
    runs-on: self-hosted
    outputs:
      deployments: ${{ steps.filter.outputs.deployments }}
      changedFiles: ${{ steps.filter.outputs.deployments_files }}
    steps:
      - name: Checkout Repo
      - uses: actions/checkout@v2
      - name: Set up Filter
      - uses: dorny/paths-filter@v2.9.3
        id: filter
        with:
          list-files: shell
          filters: |
            deployments:
              - added|modified: '**/*.yaml'
          base: 'dev'
          initial-fetch-depth: '10'
          working-directory: 'Deployments'

  # Uses the changes job to get the unique directories for each change found
  get_Unique_Directories:
    continue-on-error: true
    needs: changes
    if: ${{ needs.changes.outputs.deployments == 'true' }}
    runs-on: self-hosted
    steps:
      - name: Checkout Repo
      - uses: actions/checkout@v2
      - name: Setup Go
      - uses: actions/setup-go@v2.1.3
        with:
          go-version: '^1.16'
        id: directories
      - run: |
          directories=$(go run detectChanges.go ${{ needs.changes.outputs.changedFiles }}) &&
          echo "::set-output name=get_directories::$(directories)"

#  # Prints the unique directories found from the previous step
#  print_Directories:
#    continue-on-error: true
#    needs: get_Unique_Directories
#    runs-on: ubuntu-20.04
#    steps:
#      - run: echo ${{ needs.get_Unique_Directories.directories.outputs.get-directories }}